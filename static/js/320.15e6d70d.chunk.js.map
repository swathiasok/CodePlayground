{"version":3,"file":"static/js/320.15e6d70d.chunk.js","mappings":"wIAEWA,E,yCACX,SAAWA,GACPA,EAASA,EAAe,KAAI,GAAK,OACjCA,EAASA,EAAiB,OAAI,GAAK,SACnCA,EAASA,EAAsB,YAAI,GAAK,aAC3C,CAJD,CAIGA,IAAaA,EAAW,CAAC,I,cCG5B,MAAMC,EAAyB,mCACxB,SAASC,EAAeC,EAAcC,EAAiBC,EAAUC,EAAUC,GAC9E,GAAIC,EAAAA,EAAUC,YAAYF,GACtB,MAAO,CAAC,WAAWA,EAAKG,KAAM,wBAElC,GAAIC,EAAAA,EAAIC,MAAML,GACV,MAAO,GAGX,MAAMM,EAAUP,IAAaN,EAASc,YAAc,CAAC,mBAAqBR,IAAaN,EAASe,OAAS,CAAC,eAAiB,CAAC,aAC5H,GAAIV,EAAU,CAEV,IAAIW,EACJ,GAAIX,EAASY,SAAWC,EAAAA,GAAQC,KAAM,CAElCH,EADiBI,EAAAA,GAAQC,cAAchB,GACvBiB,IAAIF,EAAAA,GAAQG,gBAChC,KACK,CACD,MAAMC,EAAQnB,EAASoB,KAAKD,MAAMvB,GAC9BuB,GACAR,EAAOU,EAAUF,EAAM,GAAGG,eACtBH,EAAM,IACNX,EAAQe,KAAK,GAAGF,EAAUF,EAAM,GAAGG,iCAIvCX,EAAOU,EAAUrB,EAASwB,UAAUF,cAE5C,CAEA,GAAIrB,IAAaN,EAASc,YACtBD,EAAQe,KAAK,GAAGZ,gCAGf,GAAIV,IAAaN,EAASe,OAC3BF,EAAQe,KAAK,GAAGZ,0BAGf,CAED,GAAIA,EAAM,CAMN,GALAH,EAAQe,KAAK,GAAGZ,oBAChBH,EAAQe,KAAK,kBAITZ,EAAKc,QAAU,IAAK,CACpB,MAAMC,EAAcf,EAAKgB,MAAM,KAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAYD,OAAQG,IACpCpB,EAAQe,KAAK,GAAGG,EAAYG,MAAMD,GAAGE,KAAK,qBAElD,CACAtB,EAAQe,KAAK,gBACjB,CAEA,MAAMQ,EAQlB,SAA0BjC,EAAcC,EAAiBC,GACrD,IAAKA,EACD,OAAO,KAEX,IAAIgC,EAAa,KAEjB,GAAIhC,EAASY,SAAWC,EAAAA,GAAQC,KAAM,CAClC,MACMmB,EADWlB,EAAAA,GAAQC,cAAchB,GACjBiB,IAAIF,EAAAA,GAAQmB,gBAC9BD,IACAD,EAAajC,EAAgBoC,wBAAwBF,GAE7D,KAEK,CACD,MAAMG,EAAQtC,EAAauC,SAASrC,GAChCoC,IACAJ,EAAaI,EAAME,gBAE3B,CAEA,GAAIN,GAAcA,IAAeO,EAAAA,GAC7B,OAAOP,EAGX,OAAOjC,EAAgByC,qCAAqCxC,EAChE,CAlCuCyC,CAAiB3C,EAAcC,EAAiBC,GACvE+B,GACAvB,EAAQe,KAAK,GAAGF,EAAUU,oBAElC,CACJ,CACA,OAAOvB,CACX,CA4BA,SAASa,EAAUqB,GACf,OAAOA,EAAIC,QAAQ,QAAS,IAChC,C","sources":["../node_modules/monaco-editor/esm/vs/platform/files/common/files.js","../node_modules/monaco-editor/esm/vs/editor/common/services/getIconClasses.js"],"sourcesContent":["//#endregion\n//#region Utilities\nexport var FileKind;\n(function (FileKind) {\n    FileKind[FileKind[\"FILE\"] = 0] = \"FILE\";\n    FileKind[FileKind[\"FOLDER\"] = 1] = \"FOLDER\";\n    FileKind[FileKind[\"ROOT_FOLDER\"] = 2] = \"ROOT_FOLDER\";\n})(FileKind || (FileKind = {}));\n//#endregion\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Schemas } from '../../../base/common/network.js';\nimport { DataUri } from '../../../base/common/resources.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { FileKind } from '../../../platform/files/common/files.js';\nimport { ThemeIcon } from '../../../base/common/themables.js';\nconst fileIconDirectoryRegex = /(?:\\/|^)(?:([^\\/]+)\\/)?([^\\/]+)$/;\nexport function getIconClasses(modelService, languageService, resource, fileKind, icon) {\n    if (ThemeIcon.isThemeIcon(icon)) {\n        return [`codicon-${icon.id}`, 'predefined-file-icon'];\n    }\n    if (URI.isUri(icon)) {\n        return [];\n    }\n    // we always set these base classes even if we do not have a path\n    const classes = fileKind === FileKind.ROOT_FOLDER ? ['rootfolder-icon'] : fileKind === FileKind.FOLDER ? ['folder-icon'] : ['file-icon'];\n    if (resource) {\n        // Get the path and name of the resource. For data-URIs, we need to parse specially\n        let name;\n        if (resource.scheme === Schemas.data) {\n            const metadata = DataUri.parseMetaData(resource);\n            name = metadata.get(DataUri.META_DATA_LABEL);\n        }\n        else {\n            const match = resource.path.match(fileIconDirectoryRegex);\n            if (match) {\n                name = cssEscape(match[2].toLowerCase());\n                if (match[1]) {\n                    classes.push(`${cssEscape(match[1].toLowerCase())}-name-dir-icon`); // parent directory\n                }\n            }\n            else {\n                name = cssEscape(resource.authority.toLowerCase());\n            }\n        }\n        // Root Folders\n        if (fileKind === FileKind.ROOT_FOLDER) {\n            classes.push(`${name}-root-name-folder-icon`);\n        }\n        // Folders\n        else if (fileKind === FileKind.FOLDER) {\n            classes.push(`${name}-name-folder-icon`);\n        }\n        // Files\n        else {\n            // Name & Extension(s)\n            if (name) {\n                classes.push(`${name}-name-file-icon`);\n                classes.push(`name-file-icon`); // extra segment to increase file-name score\n                // Avoid doing an explosive combination of extensions for very long filenames\n                // (most file systems do not allow files > 255 length) with lots of `.` characters\n                // https://github.com/microsoft/vscode/issues/116199\n                if (name.length <= 255) {\n                    const dotSegments = name.split('.');\n                    for (let i = 1; i < dotSegments.length; i++) {\n                        classes.push(`${dotSegments.slice(i).join('.')}-ext-file-icon`); // add each combination of all found extensions if more than one\n                    }\n                }\n                classes.push(`ext-file-icon`); // extra segment to increase file-ext score\n            }\n            // Detected Mode\n            const detectedLanguageId = detectLanguageId(modelService, languageService, resource);\n            if (detectedLanguageId) {\n                classes.push(`${cssEscape(detectedLanguageId)}-lang-file-icon`);\n            }\n        }\n    }\n    return classes;\n}\nfunction detectLanguageId(modelService, languageService, resource) {\n    if (!resource) {\n        return null; // we need a resource at least\n    }\n    let languageId = null;\n    // Data URI: check for encoded metadata\n    if (resource.scheme === Schemas.data) {\n        const metadata = DataUri.parseMetaData(resource);\n        const mime = metadata.get(DataUri.META_DATA_MIME);\n        if (mime) {\n            languageId = languageService.getLanguageIdByMimeType(mime);\n        }\n    }\n    // Any other URI: check for model if existing\n    else {\n        const model = modelService.getModel(resource);\n        if (model) {\n            languageId = model.getLanguageId();\n        }\n    }\n    // only take if the language id is specific (aka no just plain text)\n    if (languageId && languageId !== PLAINTEXT_LANGUAGE_ID) {\n        return languageId;\n    }\n    // otherwise fallback to path based detection\n    return languageService.guessLanguageIdByFilepathOrFirstLine(resource);\n}\nfunction cssEscape(str) {\n    return str.replace(/[\\s]/g, '/'); // HTML class names can not contain certain whitespace characters (https://dom.spec.whatwg.org/#interface-domtokenlist), use / instead, which doesn't exist in file names.\n}\n"],"names":["FileKind","fileIconDirectoryRegex","getIconClasses","modelService","languageService","resource","fileKind","icon","ThemeIcon","isThemeIcon","id","URI","isUri","classes","ROOT_FOLDER","FOLDER","name","scheme","Schemas","data","DataUri","parseMetaData","get","META_DATA_LABEL","match","path","cssEscape","toLowerCase","push","authority","length","dotSegments","split","i","slice","join","detectedLanguageId","languageId","mime","META_DATA_MIME","getLanguageIdByMimeType","model","getModel","getLanguageId","PLAINTEXT_LANGUAGE_ID","guessLanguageIdByFilepathOrFirstLine","detectLanguageId","str","replace"],"sourceRoot":""}